//Minimum grid properties
.gridContainer{
  display: grid;
  // grid is a shorthand for setting all of the following properties in a single declaration: grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow
  // grid-template-areas:
  //   "group_1 group_2 group_3"
  //   "group_4 group_5 group_6"
  //   "group_7 group_8 group_9";
  grid-template-rows: 1fr 1fr;
  grid-template-columns: 1fr 1fr 1fr; //Could be any mess like: "1fr 20% 30px;"
  // grid-template is a shorthand for grid-template-rows and grid-template-columns. itâ€™s recommended to use the grid property instead of grid-template, as you will want to reset the auto properties as well(in most cases)
  gap: 0px 0px; // gap is a shorthand for row-gap and column-gap (grid- prefix is deprecated)
  align-items: center;
  justify-items: center;
  // place-items: center; // shorthand for align-items and justify-items
  width: 40%;
  height: 40%;
}

//A bit more complex grid setup(grid-template-columns/rows)
.container{
  display: grid;
  grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
  grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];
  gap: 0px 0px;
  align-items: center;
  justify-items: center;
  width: 40%;
  height: 40%;
}

//Grid item positioning using numbered lines
.item-a {
  grid-column-start: 2;
  grid-column-end: 5;
  grid-row-start: 1;
  grid-row-end: 3;
  // When working with CSS Grid, the grid items by default only take up the space necessary to fit their content unless otherwise specified. If a grid item does not explicitly set its width and height, it might not occupy the entire grid area allocated to it.
  width: 100%;
  height: 100%;
}

.item-b {
  grid-column-start: 1;
  grid-column-end: span col4-start;
  grid-row-start: 2;
  grid-row-end: span 2;
   // When working with CSS Grid, the grid items by default only take up the space necessary to fit their content unless otherwise specified. If a grid item does not explicitly set its width and height, it might not occupy the entire grid area allocated to it.
  width: 100%;
  height: 100%;

//Grid item positioning using named lines
// .item-a {
//   grid-column-start: 2;
//   grid-column-end: five;
//   grid-row-start: row1-start;
//   grid-row-end: third-line;
//   background-color: rgb(212, 148, 10);
// }
}
